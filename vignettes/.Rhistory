}
y_train <- factor(emnist$dataset[[1]][[2]])
X_test <- emnist$dataset[[2]][[1]]
x_test <- list()
for (i in 1:nrow(X_test)) {
x_test[[i]] <- matrix(X_test[i,], nrow=28, ncol=28)
}
y_test <- factor(emnist$dataset[[2]][[2]])
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), input_shape = c(28, 28, 1), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_flatten() %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 26) %>%
layer_activation(activation = "softmax")
model %>% compile(loss = 'categorical_crossentropy', optimizer = optimizer_rmsprop(), metrics = c('accuracy'))
cnnmodel <- model %>% fit(x_train, y_train, epochs = 20, validation_split = 0.2, batch_size = 128, verbose = 2)
x_train <- emnist$dataset[[1]][[1]]
X_train <- list()
for (i in 1:nrow(x_train)) { #unflatten
X_train[[i]] <- matrix(x_train[i,], nrow=28, ncol=28)
}
X_train <- X_train/255 #change to 0-1
x_train <- emnist$dataset[[1]][[1]]/255
X_train <- list()
for (i in 1:nrow(x_train)) { #unflatten
X_train[[i]] <- matrix(x_train[i,], nrow=28, ncol=28)
}
Y_train <- emnist$dataset[[1]][[2]]
Y_train <- to_categorical(Y_train, 62)
X_valid <- list()
for (i in 1:nrow(x_valid)) { #unflatten
X_valid[[i]] <- matrix(x_valid[i,], nrow=28, ncol=28)
}
x_valid <- emnist$dataset[[2]][[1]]/255
X_valid <- list()
for (i in 1:nrow(x_valid)) { #unflatten
X_valid[[i]] <- matrix(x_valid[i,], nrow=28, ncol=28)
}
Y_valid <- emnist$dataset[[2]][[2]]
Y_valid <- to_categorical(Y_valid, 62)
Y_train <- to_categorical(Y_train, 26)
Y_train <- emnist$dataset[[1]][[2]]
Y_train <- to_categorical(Y_train, 26)
Y_train <- emnist$dataset[[1]][[2]]
Y_train <- to_categorical(Y_train, 26)
Y_train <- emnist$dataset[[1]][[2]]
Y_train
Y_train <- factor(Y_train)
Y_valid <- emnist$dataset[[2]][[2]]
Y_valid <- factor(Y_valid)
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), input_shape = c(28, 28, 1), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_flatten() %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 26) %>%
layer_activation(activation = "softmax")
model %>% compile(loss = 'categorical_crossentropy', optimizer = optimizer_rmsprop(), metrics = c('accuracy'))
model %>% fit(X_train, Y_train, epochs = 10)
model %>% fit(X_train, Y_train, epochs = 10, verbose = 2)
# This code was taken from
# https://keras.rstudio.com/articles/examples/mnist_cnn.html
library(keras)
# Data Preparation -----------------------------------------------------
batch_size <- 128
num_classes <- 10
epochs <- 2
# Input image dimensions
img_rows <- 28
img_cols <- 28
# The data, shuffled and split between train and test sets
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
# Redefine  dimension of train/test inputs
x_train <- array_reshape(x_train, c(nrow(x_train), img_rows, img_cols, 1))
x_test <- array_reshape(x_test, c(nrow(x_test), img_rows, img_cols, 1))
input_shape <- c(img_rows, img_cols, 1)
# Transform RGB values into [0,1] range
x_train <- x_train / 255
x_test <- x_test / 255
cat('x_train_shape:', dim(x_train), '\n')
cat(nrow(x_train), 'train samples\n')
cat(nrow(x_test), 'test samples\n')
# Convert class vectors to binary class matrices
y_train <- to_categorical(y_train, num_classes)
y_test <- to_categorical(y_test, num_classes)
# Define Model -----------------------------------------------------------
# Define model
model <- keras_model_sequential() %>%
layer_conv_2d(filters = 32, kernel_size = c(3,3), activation = 'relu',
input_shape = input_shape) %>%
layer_conv_2d(filters = 64, kernel_size = c(3,3), activation = 'relu') %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.25) %>%
layer_flatten() %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = num_classes, activation = 'softmax')
# Compile model
model %>% compile(
loss = loss_categorical_crossentropy,
optimizer = optimizer_adadelta(),
metrics = c('accuracy')
)
# Train model
model %>% fit(
x_train, y_train,
batch_size = batch_size,
epochs = epochs,
validation_split = 0.2
)
scores <- model %>% evaluate(
x_test, y_test, verbose = 0
)
# Output metrics
cat('Test loss:', scores[[1]], '\n')
cat('Test accuracy:', scores[[2]], '\n')
scores <- model %>% evaluate(
x_test, y_test, verbose = 0
)
rm(list=ls)
rm(list=ls())
emnist <- readMat("/Users/wenfeng/Box Sync/Graduate/BIS557/emnist/matlab/emnist-letters.mat")
X_train <- emnist$dataset[[1]][[1]]/255
X_train
X_train <- array()
x_train <- array()
for (i in 1:nrow(X_train)) {
x_train[[i]] <- matrix(X_train[i,], nrow=28, ncol=28)
}
dim(X_train)
X_train <- emnist$dataset[[1]][[1]]/255
dim(X_train)
x_train <- array(dim = c(nrow(X_train), 28, 28))
for (i in 1:nrow(X_train)) {
x_train[[i]] <- matrix(X_train[i,], nrow=28, ncol=28)
}
x_train
x_train[[1]]
x_train[1]
x_train[,,1]
x_train[,,2]
dim(x_train)
x_train[,,124800]
x_train[,,1248]
x_train[1,,]
for (i in 1:nrow(X_train)) {
x_train[i,,] <- matrix(X_train[i,], nrow=28, ncol=28)
}
y_train <- factor(emnist$dataset[[1]][[2]])
X_test <- emnist$dataset[[2]][[1]]
x_test <- array(dim = c(nrow(X_test), 28, 28))
for (i in 1:nrow(X_test)) {
x_test[i,,] <- matrix(X_test[i,], nrow=28, ncol=28)
}
y_test <- factor(emnist$dataset[[2]][[2]])
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), input_shape = c(28, 28, 1), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_flatten() %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 26) %>%
layer_activation(activation = "softmax")
model %>% compile(loss = 'categorical_crossentropy', optimizer = optimizer_rmsprop(), metrics = c('accuracy'))
model %>% fit(x_train, y_train, epochs = 10, verbose = 2)
batch_size <- 128
num_classes <- 10
epochs <- 2
# Input image dimensions
img_rows <- 28
img_cols <- 28
# The data, shuffled and split between train and test sets
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
emnist <- readMat("/Users/wenfeng/Box Sync/Graduate/BIS557/emnist/matlab/emnist-letters.mat")
X_train <- emnist$dataset[[1]][[1]]/255
x_train <- array(dim = c(nrow(X_train), 28, 28))
for (i in 1:nrow(X_train)) {
x_train[i,,] <- matrix(X_train[i,], nrow=28, ncol=28)
}
y_train <- factor(emnist$dataset[[1]][[2]])
X_test <- emnist$dataset[[2]][[1]]
x_test <- array(dim = c(nrow(X_test), 28, 28))
for (i in 1:nrow(X_test)) {
x_test[i,,] <- matrix(X_test[i,], nrow=28, ncol=28)
}
y_test <- factor(emnist$dataset[[2]][[2]])
y_test
y_test <- mnist$test$y
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
x_train <- array_reshape(x_train, c(nrow(x_train), img_rows, img_cols, 1))
x_test <- array_reshape(x_test, c(nrow(x_test), img_rows, img_cols, 1))
input_shape <- c(img_rows, img_cols, 1)
cat('x_train_shape:', dim(x_train), '\n')
cat(nrow(x_train), 'train samples\n')
cat(nrow(x_test), 'test samples\n')
y_train <- to_categorical(y_train, num_classes)
y_test <- to_categorical(y_test, num_classes)
y_test
y_train <- to_categorical(emnist$dataset[[1]][[2]], 26)
y_test <- mnist$test$y
y_test
y_test <- to_categorical(y_test, num_classes)
y_test
y_train <- to_categorical(emnist$dataset[[1]][[2]], 26)
emnist$dataset[[1]][[2]]
as.vector(emnist$dataset[[1]][[2]])
y_train <- to_categorical(as.vector(emnist$dataset[[1]][[2]]), 26)
y_train
unique(as.vector(emnist$dataset[[1]][[2]]))
y_train <- emnist$dataset[[1]][[2]]
y_train
y_train <- unlist(emnist$dataset[[1]][[2]])
y_train
y_train <- unlist(emnist$dataset[[1]][[2]])
y_train
y_train <- as.vector(emnist$dataset[[1]][[2]])
y_train
?to_categorical
y_train <- to_categorical(as.vector(emnist$dataset[[1]][[2]]))
y_train
y_train <- as.vector(emnist$dataset[[1]][[2]])
y_train <- to_categorical(y_train)
y_test <- as.vector(emnist$dataset[[2]][[2]])
y_test <- as.vector(emnist$dataset[[2]][[2]])
y_test <- to_categorical(y_test)
rm(list=ls())
emnist <- readMat("/Users/wenfeng/Box Sync/Graduate/BIS557/emnist/matlab/emnist-letters.mat")
# train set
X_train <- emnist$dataset[[1]][[1]]/255
x_train <- array(dim = c(nrow(X_train), 28, 28))
for (i in 1:nrow(X_train)) {
x_train[i,,] <- matrix(X_train[i,], nrow=28, ncol=28)
}
y_train <- as.vector(emnist$dataset[[1]][[2]])
y_train <- to_categorical(y_train)
# test set
X_test <- emnist$dataset[[2]][[1]]
x_test <- array(dim = c(nrow(X_test), 28, 28))
for (i in 1:nrow(X_test)) {
x_test[i,,] <- matrix(X_test[i,], nrow=28, ncol=28)
}
y_test <- as.vector(emnist$dataset[[2]][[2]])
y_test <- to_categorical(y_test)
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), input_shape = c(28, 28, 1), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_flatten() %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 26) %>%
layer_activation(activation = "softmax")
model %>% compile(loss = 'categorical_crossentropy', optimizer = optimizer_rmsprop(), metrics = c('accuracy'))
model %>% fit(x_train, y_train, epochs = 10, verbose = 2)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_train <- array_reshape(x_train, c(nrow(x_train), img_rows, img_cols, 1))
X_train <- emnist$dataset[[1]][[1]]/255
x_train <- array(dim = c(nrow(X_train), 28, 28))
for (i in 1:nrow(X_train)) {
x_train[i,,] <- matrix(X_train[i,], nrow=28, ncol=28)
}
y_train <- as.vector(emnist$dataset[[1]][[2]])
y_train <- to_categorical(y_train)
# test set
X_test <- emnist$dataset[[2]][[1]]
x_test <- array(dim = c(nrow(X_test), 28, 28))
for (i in 1:nrow(X_test)) {
x_test[i,,] <- matrix(X_test[i,], nrow=28, ncol=28)
}
y_test <- as.vector(emnist$dataset[[2]][[2]])
y_test <- to_categorical(y_test)
x_train <- array_reshape(x_train, c(nrow(x_train), 28, 28, 1))
x_test <- array_reshape(x_test, c(nrow(x_test), 28, 28, 1))
cnnmodel <- model %>% fit(x_train, y_train, epochs = 20, validation_split = 0.2, batch_size = 128, verbose = 2)
y_train <- as.vector(emnist$dataset[[1]][[2]])
y_train
length(unique(y_train))
y_test <- as.vector(emnist$dataset[[2]][[2]])
length(unique(y_test))
y_test <- to_categorical(y_test)
y_train <- to_categorical(y_train)
y_train <- to_categorical(y_train, num_classes = 26)
y_train <- as.vector(emnist$dataset[[1]][[2]])
length(unique(y_train))
y_train <- to_categorical(y_train, num_classes = 26)
y_train
length(unique(y_train))
y_train <- as.vector(emnist$dataset[[1]][[2]])-1
y_train <- to_categorical(y_train, num_classes = 26)
y_train <- as.vector(emnist$dataset[[1]][[2]])-1
length(unique(y_train))
y_train <- to_categorical(y_train, num_classes = 26)
y_test <- as.vector(emnist$dataset[[2]][[2]])-1
length(unique(y_test))
y_test <- to_categorical(y_test)
x_train <- array_reshape(x_train, c(nrow(x_train), 28, 28, 1))
x_test <- array_reshape(x_test, c(nrow(x_test), 28, 28, 1))
X_train <- emnist$dataset[[1]][[1]]/255
x_train <- array(dim = c(nrow(X_train), 28, 28))
for (i in 1:nrow(X_train)) {
x_train[i,,] <- matrix(X_train[i,], nrow=28, ncol=28)
}
y_train <- as.vector(emnist$dataset[[1]][[2]])-1
length(unique(y_train))
y_train <- to_categorical(y_train, num_classes = 26)
# test set
X_test <- emnist$dataset[[2]][[1]]
x_test <- array(dim = c(nrow(X_test), 28, 28))
for (i in 1:nrow(X_test)) {
x_test[i,,] <- matrix(X_test[i,], nrow=28, ncol=28)
}
y_test <- as.vector(emnist$dataset[[2]][[2]])-1
length(unique(y_test))
y_test <- to_categorical(y_test)
x_train <- array_reshape(x_train, c(nrow(x_train), 28, 28, 1))
x_test <- array_reshape(x_test, c(nrow(x_test), 28, 28, 1))
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), input_shape = c(28, 28), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_flatten() %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 26) %>%
layer_activation(activation = "softmax")
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), input_shape = c(28, 28), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_flatten() %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 26) %>%
layer_activation(activation = "softmax")
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), input_shape = c(28, 28, 1), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_flatten() %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 26) %>%
layer_activation(activation = "softmax")
model %>% compile(loss = 'categorical_crossentropy', optimizer = optimizer_rmsprop(), metrics = c('accuracy'))
model %>% fit(x_train, y_train, epochs = 10, verbose = 2)
cnnmodel <- model %>% fit(x_train, y_train, epochs = 20, validation_split = 0.2, batch_size = 128, verbose = 2)
cnnmodel
cnnmodel %>% evaluate(x_test, y_test, verbose = 0)
cnnmodel %>% keras.evaluate(x_test, y_test, verbose = 0)
?evaluate.keras.engine.training.Model
cnnmodel %>% keras.engine.training.Model(x_test, y_test, verbose = 0)
cnnmodel %>% keras.engine.training.Model::evaluate(x_test, y_test, verbose = 0)
cnnmodel %>% keras::evaluate(x_test, y_test, verbose = 0)
?evaluate
model
scores <- model %>% evaluate(x_test, y_test, verbose = 0)
UseMethod("evaluate")
??evaluate
?evaluate
scores <- model %>% evaluate.keras.engine.training.Model(x_test, y_test, verbose = 0)
library(keras)
scores <- model %>% keras::evaluate(x_test, y_test, verbose = 0)
scores
scores <- cnnmodel %>% keras::evaluate(x_test, y_test, verbose = 0)
model %>% keras::evaluate(x_test, y_test, verbose = 0)
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), input_shape = c(28, 28, 1), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = c(2, 2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_flatten() %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 26) %>%
layer_activation(activation = "softmax")
model %>% compile(loss = 'categorical_crossentropy', optimizer = optimizer_rmsprop(), metrics = c('accuracy'))
model %>% fit(x_train, y_train, epochs = 10, validation_data = list(x_test, y_test))
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), input_shape = c(28, 28, 1), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = c(2, 2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.2) %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2), padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.2) %>%
layer_flatten() %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dropout(rate = 0.2) %>%
layer_dense(units = 26) %>%
layer_activation(activation = "softmax")
model %>% compile(loss = 'categorical_crossentropy', optimizer = optimizer_rmsprop(), metrics = c('accuracy'))
model %>% fit(x_train, y_train, epochs = 1, validation_data = list(x_test, y_test))
model %>% fit(x_train, y_train, epochs = 2, validation_data = list(x_test, y_test))
model %>% keras::evaluate(x_test, y_test, verbose = 0)
